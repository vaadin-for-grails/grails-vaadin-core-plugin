package org.vaadin.grails.ui.builders

import org.vaadin.grails.ui.builders.handlers.*

import java.util.concurrent.ConcurrentLinkedDeque

/**
 * Vaadin component tree handler
 *
 * @author Stephan Grundner
 * @since 2.0
 */
class ComponentTreeHandler {

    static interface TreeNode {
        String getPrefix()
        TreeNode getParent()
        List<TreeNode> getChildren()
        Object getName()
        Map getAttributes()
        Object getValue()

        Object getPayload()
        void setPayload(Object payload)

        TreeNodeHandler getHandler()
        void setHandler(TreeNodeHandler handler)
    }

    static interface TreeNodeHandler {

        boolean acceptNode(TreeNode node)
        void handle(TreeNode node)
        void handleChildren(TreeNode node)
    }

    static final Deque<TreeItemNodeHandler> nodeHandlers

    static {
        nodeHandlers = new ConcurrentLinkedDeque<TreeItemNodeHandler>()
        addNodeHandler(new ComponentNodeHandler())
        addNodeHandler(new BuildNodeHandler())
        addNodeHandler(new I18nNodeHandler())
        addNodeHandler(new MenuItemNodeHandler())
        addNodeHandler(new TreeItemNodeHandler())
        addNodeHandler(new TabSheetTabNodeHandler())
        addNodeHandler(new AccordionTabNodeHandler())
    }

    static boolean addNodeHandler(TreeNodeHandler nodeHandler) {
        assert nodeHandler != null
        def existingNodeHandler = nodeHandlers.find { it.getClass() == nodeHandler.getClass() }
        if (existingNodeHandler) {
            if (existingNodeHandler == nodeHandler) {
                return false
            } else {
                if (!nodeHandlers.remove(existingNodeHandler)) {
                    return false
                }
            }
        }
        return nodeHandlers.push(nodeHandler)
    }

    static boolean removeNodeHandler(TreeNodeHandler nodeHandler) {
        assert nodeHandler != null
        nodeHandlers.remove(nodeHandler)
    }

    /**
     * Handle a node generated by a Groovy builder.
     *
     * @param node
     */
    public void handleNode(TreeNode node) {
        def handler = nodeHandlers.find { it.acceptNode(node) }
        if (handler) {
            def attributesCopy = node.attributes?.clone()
            try {
                node.handler = handler
                handler.handle(node)
                node.parent?.handler?.handleChildren(node.parent)
            } finally {
                if (attributesCopy) {
                    node.attributes.putAll(attributesCopy)
                }
            }
        } else {
            throw new RuntimeException("Unexpected node with name [${node.name}]" +
                    (node.prefix ? " and prefix [${node.prefix}]" : ""))
        }
    }
}
