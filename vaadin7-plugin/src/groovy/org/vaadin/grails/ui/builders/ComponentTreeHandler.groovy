package org.vaadin.grails.ui.builders

import org.vaadin.grails.ui.builders.handlers.*

/**
 * Vaadin component tree handler
 *
 * @author Stephan Grundner
 * @since 1.0
 */
class ComponentTreeHandler {

    static interface TreeNode {
        String getPrefix()
        TreeNode getParent()
        List<TreeNode> getChildren()
        Object getName()
        Map getAttributes()
        Object getValue()

        Object getPayload()
        void setPayload(Object payload)

        TreeNodeHandler getHandler()
        void setHandler(TreeNodeHandler handler)
    }

    static interface TreeNodeHandler {

        boolean acceptNode(TreeNode node)
        void handle(TreeNode node)
        void handleChildren(TreeNode node)
    }

    final Set<TreeNodeHandler> nodeHandlers = new LinkedHashSet<>()

    ComponentTreeHandler() {
        addNodeHandler(createNodeHandler(I18nNodeHandler))
        addNodeHandler(createNodeHandler(BuildNodeHandler))
        addNodeHandler(createNodeHandler(TreeItemNodeHandler))
        addNodeHandler(createNodeHandler(TabSheetTabNodeHandler))
        addNodeHandler(createNodeHandler(AccordionTabNodeHandler))
        addNodeHandler(createNodeHandler(MenuItemNodeHandler))
        addNodeHandler(createNodeHandler(BreadcrumbNodeHandler))
        addNodeHandler(createNodeHandler(ComponentNodeHandler))
    }

    protected TreeNodeHandler createNodeHandler(Class<? extends TreeNodeHandler> nodeHandlerClass) {
        nodeHandlerClass.newInstance(this)
    }

    void addNodeHandler(TreeNodeHandler nodeHandler) {
        assert nodeHandler != null
        nodeHandlers.add(nodeHandler)
    }

    void removeNodeHandler(TreeNodeHandler nodeHandler) {
        assert nodeHandler != null
        nodeHandlers.remove(nodeHandler)
    }

    /**
     * Handle a node generated by a Groovy builder.
     *
     * @param node
     */
    public void handleNode(TreeNode node) {
        def handler = nodeHandlers.find { it.acceptNode(node) }
        if (handler) {
            def attributesCopy = node.attributes?.clone()
            try {
                node.handler = handler
                handler.handle(node)
                node.parent?.handler?.handleChildren(node.parent)
            } finally {
                if (attributesCopy) {
                    node.attributes.putAll(attributesCopy)
                }
            }
        } else {
            throw new RuntimeException("Unexpected node with name [${node.name}]" +
                    (node.prefix ? " and prefix [${node.prefix}]" : ""))
        }
    }
}
